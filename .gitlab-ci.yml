image: python:3.11-slim

include:
  - template: Security/Dependency-Scanning.gitlab-ci.yml

#services:
#  - docker:dind

cache:
  paths:
    - ".cache/pip"
  key: "$CI_PROJECT_ID"

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PIP_TRUSTED_HOST: "pypi.lan"

before_script:
  - python --version
  - pip install virtualenv pip -U
  - virtualenv venv
  - source venv/bin/activate



stages:
  - Setup
  - Static Analysis
  - Test
  - Deploy


dependency_scanning:
  stage: Static Analysis
  needs: []


setup:
  stage: Setup
  needs: []
  before_script:
    - apt-get update -qy
    - apt-get install -y python-dev git
  script:
    - echo $CI_JOB_TRIGGERED
    - echo $CI_PIPELINE_SOURCE
    - echo $CI_COMMIT_SHA
    - echo $CI_COMMIT_REF_NAME
    - echo $CI_BUILD_REF
    - echo $CI_COMMIT_BRANCH
    - echo $CI_COMMIT_TAG
    - git fetch --all
    # Check if a commit tag && check CI_BRANCHES contains tag; get clear branch name; filter error message if not found; make remote branches seem local
    - '[[ -n $CI_COMMIT_TAG ]] && CI_BRANCHES=`git branch -a --contains "$CI_COMMIT_REF_NAME" 2>&1 | sed -E "s/^\s*\*?\s+(.+)/\1/" | sed -E "s/error:.+//" | sed -E "s/remotes\/origin\///"`'
    # Branch is declared
    - '[[ -n $CI_COMMIT_BRANCH ]] && CI_BRANCHES=$CI_COMMIT_BRANCH'
    - CI_BRANCH_MASTER=`echo "$CI_BRANCHES" | grep -q -E "^master$" && echo "true" || echo "false"`
    - CI_BRANCH_DEVELOP=`echo "$CI_BRANCHES" | grep -q -E "^develop$" && echo "true" || echo "false"`
    - PY_VERSION=`python setup.py version`
    - PY_NAME=`python setup.py name`
    # - echo "CI_BRANCHES=$CI_BRANCHES" >> build.env
    - echo "CI_BRANCH_MASTER=$CI_BRANCH_MASTER" >> build.env
    - echo "CI_BRANCH_DEVELOP=$CI_BRANCH_DEVELOP" >> build.env
    - echo "PY_VERSION=$PY_VERSION" >> build.env
    - echo "PY_NAME=$PY_NAME" >> build.env
    - cat build.env
  artifacts:
    reports:
      dotenv: build.env
    expire_in: 12h


flake8:
  stage: Static Analysis
  needs: []
  before_script:
    - pip install -r requirements-dev.txt
    - pip install -r requirements-test.txt
  script:
    - flake8 src


mypy:
  stage: Static Analysis
  needs: []
  before_script:
    - pip install -r requirements-dev.txt
    - pip install -r requirements-test.txt
  script:
    - mypy src


# TODO: Bandit


# With dot
.pytest:
  stage: Test
  needs:
    - setup
  variables:
    PYPI_INDEX: prod
  before_script:
    - pip install -r requirements-dev.txt
    - pip install -r requirements-test.txt
  script:
    - PIP_INDEX_URL=http://pypi.lan/root/$PYPI_INDEX tox -e test
    - sed -i -E "s|<source>.+</source>|<source>src</source>|g" reports/coverage.xml
    - sed -i -E 's|filename=".*/(alexander_fw/[a-zA-Z0-9\._/-]*)"| filename="\1"|g' reports/coverage.xml
  artifacts:
    reports:
      junit: reports/pytest.xml
      cobertura: reports/coverage.xml

.pytest:pytest:
  extends:
    - .pytest
  only:
    - master
    - tags

.pytest:rc:
  extends:
    - .pytest
  variables:
    PYPI_INDEX: rc
  only:
    - develop

.pytest:dev:
  extends:
    - .pytest
  variables:
    PYPI_INDEX: dev
  except:
    - master
    - develop
    - tags

.pytest:3.8:
  extends:
    - .pytest
  image: python:3.8
  only:
    - master
    - tags

.pytest:3.9:
  extends:
    - .pytest
  image: python:3.9
  only:
    - master
    - tags

.pytest:3.10:
  extends:
    - .pytest
  image: python:3.10
  only:
    - master
    - tags

.pytest:3.11:
  extends:
    - .pytest
  image: python:3.11
  only:
    - master
    - tags


# With dot
.deploy:
  variables:
    PYPI_INDEX: develop
  stage: Deploy
  before_script:
    - pip install -r requirements-dev.txt
  script:
    - python setup.py build
    - devpi use http://pypi.gate.lan
    - devpi login $PYPI_USER --password $PYPI_PASSWORD
    - devpi use root/$PYPI_INDEX
    - devpi upload --from-dir dist/
    - devpi logout
  artifacts:
    paths:
      - dist/

# Deploy to prod if there is a git tag
deploy:pypi:prod:
  extends:
    - .deploy
  variables:
    PYPI_INDEX: prod
  rules:
    #- if: '$CI_COMMIT_BRANCH == "master"'
    #- if: '$CI_COMMIT_BRANCH != "master"'
    #  when: never
    #- changes:
    #    - /src/young_reader/__version__.py
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.?[0-9]*\.?[0-9]*$/'

# Deploy to rc on develop branch
deploy:pypi:rc:
  extends:
    - .deploy
  variables:
    PYPI_INDEX: rc
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
    #- if: '$CI_COMMIT_BRANCH != "develop"'
    #  when: never
    #- if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.?[0-9]*\.?[0-9]*$/'

# Deploy to other on all not master/develop
deploy:pypi:other:
  extends:
    - .deploy
  variables:
    PYPI_INDEX: other
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.?[0-9]*\.?[0-9]*$/'
      when: never
    - if: '$CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "develop"'
    #- if: '$CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "develop"'
    #  when: never
    #- when: on_success

